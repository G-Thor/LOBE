{% extends "__base.jinja" %}
{% block headscripts %}
    <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
{% endblock %}
{% block body %}
    <div class='row mb-3'>
        <div class='col-12'>
            <h3 class='font-weight-bold'>
                {% if record_test %}
                    Hljóðprufa
                {% elif single %}
                    Stakur texti
                {% else %}
                    Söfnun: {{collection.name}}
                {% endif %}
            </h3>
            <div>
                <span id="errorMsg"></span>
                <span id="analyzeMsg"></span>
            </div>
            <button id="start" class='btn btn-primary' >Start microphone</button>
            <button id='send' type='button' class='btn btn-secondary'>Senda</button>

        </div>
        {% if not single %}
            <div class='col-12 mt-3'>
                <p class='font-weight-bold'>(<span id='currentIndexSpan'></span>/<span id='totalIndexSpan'></span>)</p>
                <div class="progress">
                    <div class="progress-bar bg-success" id='tokenProgress' role="progressbar"></div>
                </div>
            </div>
        {% endif %}
    </div>
    <div class='row'>
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12 controls mb-3 d-flex justify-content-{% if single %}around{% else%}between{% endif %}'>
            {% if not single %}
                <button id='prevButton' class='btn btn-secondary rounded-circle directionButton' type='button'><i class='fa fa-arrow-left'></i></button>
            {% endif %}
            <button id='record' class='btn btn-secondary rounded-pill' type='button' data-state='initial'>Start Recording</button>
            {% if not single %}
                <button id='nextButton' class='btn btn-secondary rounded-circle directionButton' type='button'><i class='fa fa-arrow-right'></i></button>
            {% endif %}
        </div>
    </div>
    <div class='row'>
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12'>
            <div class="card">
                <div class="card-body">
                    <h3 class='card-text' id='tokenText'>{{token.text}}</h3>
                    <p class='mb-0'>{{token.id}}<span id="tokenID"></span></p>
                    <p class='card-text'><a id="tokenHref" href='#'><code id="tokenFileID"></code></a></p>
                    {% if not use_video %}
                        <audio id="gum" playsinline muted></audio>
                        <audio id="recorded" playsinline></audio>
                    {% endif %}
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar bg-success" id='volumeBar' role="progressbar"></div>
                    </div>
                </div>
                <ul id='recordingInfoList' class="list-group list-group-flush">
                    <li id='playerListItem' class='list-group-item'>
                        <code id='recordingIDSpan'></code>
                        <audio id="recordingPlayer" type="audio/wav"></audio>

                        <div class='btn-group float-right' role='group'>
                            <button id='play' type='button' class='btn btn-secondary btn-sm'><i id='playButtonIcon' class='fa fa-play'></i>
                            </button>
                            <button id='download' class="btn btn-secondary btn-sm"><i class='fa fa-download'></i></button>
                            <button id='recordingDeleteButton' type='button' class='btn btn-secondary btn-sm text-danger'>
                                <i class='fa fa-trash'></i>
                            </button>
                        </div>
                    </li>
                    <li id="oscilloscope-li" class='list-group-item' style='display: none;'>
                        <canvas id="oscilloscope"></canvas>
                    </li>
                    <li id="transcriptionListItem2" class="list-group-item" style="font-style: italic;">
                        <p id="transcription2" class="mb-0"></p>
                        <small class="float-right" style="font-style: initial;">Rafrænt afrit</small>
                    </li>
                </ul>
            </div>
            {% if use_video %}
                <div class='card'>
                    <div class='card-body'>
                        <video id="gum" playsinline autoplay muted></video>
                        <video id="recorded" playsinline style='display: none;'></video>
                    </div>
                </div>
            {% endif %}
                <div class='card'>
                    <div class='card-body'>
                        <div id='plot'></div>
                    </div>
                </div>
        </div>
    </div>
    <script src='{{url_for("static", filename="js/base64ArrayBuffer.js")}}'></script>
    <script>
        'use strict';

        /* globals MediaRecorder */

        const mediaSource = new MediaSource();
        mediaSource.addEventListener('sourceopen', handleSourceOpen, false);
        let mediaRecorder;
        let audioCtx;
        let recordedBlobs;
        let sourceBuffer;
        let analyser;
        let source;
        let bufferLength;
        let dataArray;
        let streamProcessor;
        let ws;

        const oscilloscopeContainer = document.querySelector('#oscilloscope-li');
        const canvas = document.getElementById("oscilloscope");
        const canvasCtx = canvas.getContext("2d");

        const streamResultElem = document.getElementById("transcription2");
        const transcriptionListItem = document.getElementById('transcriptionListItem2');

        const hasEchoCancellation = true;

        const errorMsgElement = document.querySelector('span#errorMsg');
        const analyzeMsgElement = document.querySelector('span#analyzeMsg');
        const recordButton = document.querySelector('button#record');

        const playButton = document.querySelector('button#play');
        const sendButton = document.querySelector('button#send');

        const submitForm = document.querySelector('form#submitForm');

        const gumVideo = document.querySelector('#gum');
        const recordedVideo = document.querySelector('#recorded');

        recordButton.addEventListener('click', () => {
            if (recordButton.textContent === 'Start Recording') {
                console.log("start recording");
                startRecording();
            } else {
                stopRecording();
                recordButton.textContent = 'Start Recording';
                playButton.disabled = false;
                downloadButton.disabled = false;
                oscilloscopeContainer.style.display = 'none';
            }
        });

        sendButton.addEventListener('click', () => {
            const blob = new Blob(recordedBlobs, {type: 'audio/webm'});
            var fd = new FormData();
            fd.append("the_file", blob, 'test.webm');
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '{{url_for("post_recording_beta", coll_id=collection.id)}}', true);
            xhr.send(fd);
        })


        playButton.addEventListener('click', () => {
            gumVideo.style.display = 'none';
            const superBuffer = new Blob(recordedBlobs, {type: 'audio/webm'});
            recordedVideo.src = null;
            recordedVideo.srcObject = null;
            recordedVideo.src = window.URL.createObjectURL(superBuffer);
            recordedVideo.controls = true;
            recordedVideo.style.display = 'block';
            recordedVideo.play();
        });

        const downloadButton = document.querySelector('button#download');
        downloadButton.addEventListener('click', () => {
            const blob = new Blob(recordedBlobs, {type: 'audio/webm'});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'test.webm';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        });

        function handleSourceOpen(event) {
            console.log('MediaSource opened');
            sourceBuffer = mediaSource.addSourceBuffer('audio/webm');
            console.log('Source buffer: ', sourceBuffer);
        }

        function handleDataAvailable(event) {
            console.log('handleDataAvailable', event);
            if (event.data && event.data.size > 0) {
                recordedBlobs.push(event.data);
            }
        }

        function startRecording() {
            recordedBlobs = [];
            let options = {mimeType: 'audio/webm'};

            try {
                mediaRecorder = new MediaRecorder(window.stream, options);
                audioCtx = new AudioContext(window.stream);
                source = audioCtx.createMediaStreamSource(window.stream);
                analyser = audioCtx.createAnalyser();
                source.connect(analyser);

                bufferLength = analyser.frequencyBinCount;
                dataArray = new Uint8Array(bufferLength);

                ws = constructWS(audioCtx);

                oscilloscopeContainer.style.display = 'block';
                draw();

            } catch (e) {
                console.error('Exception while creating MediaRecorder:', e);
                errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;
                return;
            }

            console.log('Created MediaRecorder', mediaRecorder, 'with options', options);
            recordButton.textContent = 'Stop Recording';
            playButton.disabled = true;
            downloadButton.disabled = true;
            mediaRecorder.onstop = (event) => {
                console.log('Recorder stopped: ', event);
                console.log('Recorded Blobs: ', recordedBlobs);
            };
            mediaRecorder.ondataavailable = handleDataAvailable;
            mediaRecorder.start(10); // collect 10ms of data
            console.log('MediaRecorder started', mediaRecorder);
        }

        function stopRecording() {
            mediaRecorder.stop();
            console.log("stopping");
            audioCtx.close(); //will also close the analyser and the streamprocessor
            analyzeAudio();
            if (!!ws) {
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({ audioContent: "" }));
                }
            }
        }

        function handleSuccess(stream) {
            recordButton.disabled = false;
            console.log('getUserMedia() got stream:', stream);
            window.stream = stream;
            gumVideo.srcObject = stream;
        }

        async function init(constraints) {
            try {
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                handleSuccess(stream);
            } catch (e) {
                console.error('navigator.getUserMedia error:', e);
                errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;
            }
        }

        document.querySelector('button#start').addEventListener('click', async () => {
            //const hasEchoCancellation = document.querySelector('#echoCancellation').checked;
            const constraints = {{media_constraints}};
            console.log('Using media constraints:', constraints);
            await init(constraints);
        });

        function draw() {
            requestAnimationFrame(draw);
            analyser.getByteTimeDomainData(dataArray);
            canvasCtx.fillStyle = "#303030";
            canvasCtx.fillRect(0, 0, canvas.width, canvas.height);

            canvasCtx.lineWidth = 2;
            canvasCtx.strokeStyle = "#00bc8c";

            canvasCtx.beginPath();

            var sliceWidth = canvas.width * 1.0 / bufferLength;
            var x = 0;

            for (var i = 0; i < bufferLength; i++) {

                var v = dataArray[i] / 128.0;
                var y = v * canvas.height / 2;

                if (i === 0) {
                canvasCtx.moveTo(x, y);
                } else {
                canvasCtx.lineTo(x, y);
                }

                x += sliceWidth;
            }

            canvasCtx.lineTo(canvas.width, canvas.height / 2);
            canvasCtx.stroke();
        }

        function analyzeAudio(){
            const blob = new Blob(recordedBlobs, {type: 'audio/webm'});
            var fd = new FormData();
            fd.append("audio", blob, 'test.webm');
            var xhr = new XMLHttpRequest();
            xhr.onload = function(e){
                if(this.readyState === XMLHttpRequest.DONE) {
                    if(xhr.status == '200'){
                        analyzeMsgElement.innerHTML = xhr.responseText;
                    } else{
                        console.log('bad status');
                    }
                } else{
                    console.log('not ready');
                }
            }
            xhr.open('POST', '{{url_for("analyze_audio")}}', true);
            xhr.send(fd);
        }

        function constructWS(){
            function floatTo16BitPCM(output, offset, input) {
            for (var i = 0; i < input.length; i++, offset += 2) {
            var s = Math.max(-1, Math.min(1, input[i]));
            output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
               }
            }

            ws = new WebSocket("wss://tal.ru.is/v1/speech:streamingrecognize?token=ak_JLedkaWqqORPpYByLXeZjMG4JN0rQkwZ4zn6zg28WmvE57oK9badDAlV12PY5Xo0", );
            ws.onopen = function(e) {
                console.log('trying');
                ws.send(JSON.stringify({
                    streamingConfig: {
                        config: { sampleRate: audioCtx.sampleRate, encoding:"LINEAR16",
                            maxAlternatives: 1 },
                    interimResults: true}
                }));

                streamProcessor = audioCtx.createScriptProcessor(1024, 1, 1);
                source.connect(streamProcessor);
                streamProcessor.connect(audioCtx.destination);
                streamProcessor.onaudioprocess = function(e){
                    if (!e.inputBuffer.getChannelData(0).every(
                        function(elem) { return elem === 0; })) {
                        var buffer = new ArrayBuffer(e.inputBuffer.length * 2);
                        var view = new DataView(buffer);
                        floatTo16BitPCM(view, 0, e.inputBuffer.getChannelData(0));
                        var encodedContent = base64ArrayBuffer(buffer);
                        ws.send(JSON.stringify({ audioContent: encodedContent }));
                    } else{
                        console.log('StreamProcessor.onaudioprocess else');
                    }
                }
            };
            ws.onmessage = function(event){
                var response = JSON.parse(event.data);
                var result = response.result;
                var res = result.results;
                if (res !== undefined && res.length > 0) {
                    if (res[0].isFinal) {
                        var transcript = res[0].alternatives[0].transcript || "";
                        var segmentId = "streamingResult-" + (result.resultIndex || 0);
                        var segmentSpan = document.getElementById(segmentId);
                        if (!segmentSpan) {
                            segmentSpan = document.createElement("span");
                            segmentSpan.id = segmentId;
                            segmentSpan.innerHTML = transcript;
                            streamResultElem.appendChild(segmentSpan);
                        } else {
                            segmentSpan.innerHTML = transcript;
                            segmentSpan.classList.remove("streaming-result-interim");
                        }
                        segmentSpan.classList.add("streaming-result-final");
                    } else if (res[0] !== undefined){
                        var transcript = res[0].alternatives[0].transcript || "";
                        var segmentId = "streamingResult-" + (result.resultIndex || 0);
                        var segmentSpan = document.getElementById(segmentId);
                        if (!segmentSpan) {
                            segmentSpan = document.createElement("span");
                            segmentSpan.id = segmentId;
                            segmentSpan.classList.add("streaming-result-interim");
                            segmentSpan.innerHTML = transcript;
                            streamResultElem.appendChild(segmentSpan);
                        } else {
                            segmentSpan.innerHTML = transcript;
                        }
                    }
                } else{
                    if(result.endpointerType === "END_OF_AUDIO"){
                        var spans = streamResultElem.children;
                        var transcript = ''
                        for(var i=0; i< spans.length; i++){
                            transcript += spans[i].innerHTML;
                        }
                        if(transcript === ''){
                            transcript = 'Ekkert til afritunar';
                        }
                        streamResultElem.innerHTML = transcript;
                    }
                }
            }
            return ws;

            function plot(){
                var samples = [-0.007659912,-0.009918213,-0.011505127,-0.014511108,-0.016159058,-0.018478394,-0.020217896,-0.018692017,-0.018096924,-0.018112183,-0.018615723,-0.019195557,-0.017440796,-0.016403198,-0.01576233,-0.014175415,-0.0132751465,-0.0107421875,-0.00793457,-0.009262085,-0.010223389,-0.00843811,-0.0078125,-0.007843018,-0.010345459,-0.013198853,-0.010910034,-0.009017944,-0.008361816,-0.0067443848,-0.0045776367,-0.0002593994,0.00035095215,-0.0006713867,0.000869751,0.00022888184,0.0005645752,0.00022888184,-0.00065612793,0.0027008057,0.0025939941,0.0011749268,0.0013275146,-0.0013275146,-0.0018005371,-0.0022888184,-0.0034332275,-0.0015411377,-0.00093078613,-0.0017089844,-0.0031280518,-0.0036468506,-0.0034484863,-0.004547119,-0.0036621094,-0.002960205,-0.003540039,-0.0037231445,-0.0043792725,-0.0053863525,-0.0061035156,-0.005844116,-0.007659912,-0.0077209473,-0.0063323975,-0.008956909,-0.0067443848,-0.003326416,-0.000579834,0.0064697266,0.007980347,0.008911133,0.0113220215,0.010101318,0.009567261,0.0071258545,0.0056610107,0.0061035156,0.0063323975,0.0069885254,0.004562378,0.0035095215,0.002090454,-0.0019989014,-0.0033874512,-0.0037841797,-0.0029754639,-0.0020141602,-0.003921509,-0.0070648193,-0.0090789795,-0.010025024,-0.011199951,-0.010635376,-0.010116577,-0.009765625,-0.008773804,-0.010269165,-0.009979248,-0.007369995,-0.0048217773,-0.0013885498,0.00062561035,0.0022125244,0.0033874512,0.0037231445,0.0054626465,0.006500244,0.0054779053,0.0043182373,0.0036315918,0.0022277832,-0.0007171631,-0.0041656494,-0.0062408447,-0.007385254,-0.007797241,-0.009155273,-0.011581421,-0.010009766,-0.010345459,-0.01184082,-0.009246826,-0.011444092,-0.009857178,-0.0060272217,-0.008178711,-0.0033721924,-0.001083374,-0.0021514893,0.00088500977,-0.0015563965,-0.0019989014,-0.003036499,-0.0075683594,-0.009353638,-0.013763428,-0.016342163,-0.018310547,-0.02017212,-0.017822266,-0.017669678,-0.015731812,-0.013244629,-0.014419556,-0.013000488,-0.011184692,-0.010467529,-0.007751465,-0.005554199,-0.0040283203,-0.0023040771,-0.004333496,-0.006881714,-0.007507324,-0.008468628,-0.0072784424,-0.0082092285,-0.009140015,-0.009262085,-0.013442993,-0.013397217,-0.015380859,-0.018569946,-0.01499939,-0.015625,-0.014678955,-0.013305664,-0.016448975,-0.014251709,-0.013336182,-0.014221191,-0.013824463,-0.013381958,-0.009780884,-0.008331299,-0.008392334,-0.00920105,-0.010147095,-0.0074920654,-0.008758545,-0.012191772,-0.012771606,-0.013977051,-0.013473511,-0.013046265,-0.014526367,-0.013320923,-0.012207031,-0.012496948,-0.010513306,-0.008483887,-0.006439209,-0.0038757324,-0.0028686523,-0.00077819824,0.0022888184,0.0038757324,0.0051727295,0.0071105957,0.0074920654,0.0062561035,0.0053710938,0.0048828125,0.008071899,0.01020813,0.008621216,0.011383057,0.013626099,0.015640259,0.019210815,0.017211914,0.017105103,0.018203735,0.016586304,0.01676941,0.013748169,0.010971069,0.011459351,0.010314941,0.011199951,0.011642456,0.010070801,0.012008667,0.012573242,0.0116119385,0.012023926,0.008636475,0.0065460205,0.0065307617,0.0041656494,0.0036010742,0.002822876,0.0012969971,0.0011444092,0.0031280518,0.0060577393,0.0076904297,0.011734009,0.012359619,0.012435913,0.015838623,0.013656616,0.015853882,0.017929077,0.013656616,0.015151978,0.014007568,0.011291504,0.011642456,0.007843018,0.0055236816,0.0062408447,0.0061035156,0.0057678223,0.0064849854,0.0060577393,0.005126953,0.0057373047,0.004638672,0.005432129,0.0066070557,0.004989624,0.0054016113,0.005584717,0.006210327,0.007675171,0.007583618,0.008178711,0.01008606,0.012008667,0.013183594,0.015045166,0.015930176,0.017105103,0.020309448,0.020965576,0.021331787,0.020568848,0.017181396,0.01676941,0.017089844,0.01586914,0.015823364,0.014984131,0.013214111,0.015197754,0.016143799,0.014785767,0.015487671,0.012161255,0.008682251,0.008895874,0.008285522,0.009399414,0.0101623535,0.009017944,0.0071105957,0.005783081,0.006088257,0.0062561035,0.0077819824,0.0079193115,0.0068359375,0.006729126,0.0058135986,0.0035552979,-0.0006866455,-0.0028076172,-0.0035247803,-0.0042266846,-0.0049438477,-0.0082092285,-0.0095825195,-0.008911133,-0.0064086914,-0.003540039,-0.0009460449,0.0035247803,0.005508423,0.009841919,0.013641357,0.014297485,0.017150879,0.017623901,0.019927979,0.02078247,0.017974854,0.0158844,0.012268066,0.01020813,0.005126953,0.002456665,0.0030517578,0.001663208,0.00541687,0.003921509,0.0029449463,0.0073394775,0.007080078,0.009155273,0.010055542,0.010528564];

                var trace = {
                    x: samples,
                    y: samples,
                    mode: 'lines',
                    type: 'scatter'
                }

                var data = [trace];

                Plotly.newPlot('plot', data, {autosize:true} )
            }

            plot();
        }

    </script>
{% endblock %}
<div id="container">

    <h1><a href="//webrtc.github.io/samples/" title="WebRTC samples homepage">WebRTC samples</a>
        <span>MediaRecorder</span></h1>

    <p>For more information see the MediaStream Recording API <a
            href="http://w3c.github.io/mediacapture-record/MediaRecorder.html"
            title="W3C MediaStream Recording API Editor's Draft">Editor's&nbsp;Draft</a>.</p>

    <audio id="gum" playsinline muted></audio>
    <audio id="recorded" playsinline></audio>

    <div>
        <button id="start">Start camera</button>
        <button id="record" disabled>Start Recording</button>
        <button id="play" disabled>Play</button>
        <button id="download" disabled>Download</button>
    </div>

    <div>
        <h4>Media Stream Constraints options</h4>
        <p>Echo cancellation: <input type="checkbox" id="echoCancellation"></p>
    </div>

    <div>
        <span id="errorMsg"></span>
    </div>

    <a href="https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/record"
       title="View source for this page on GitHub" id="viewSource">View source on GitHub</a>

</div>