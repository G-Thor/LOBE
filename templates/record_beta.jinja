{% extends "__base.jinja" %}
{% block headscripts %}
    <script src="https://unpkg.com/wavesurfer.js"></script>
    <script src="https://unpkg.com/wavesurfer.js/dist/plugin/wavesurfer.microphone.min.js"></script>

    <script type='text/javascript'>
        var tokens = {{json_tokens}};
        var analyze_url = "{{url_for('analyze_audio')}}";
        var talAPIToken = "{{tal_api_token}}";
        var postRecordingRoute = "{{url_for('post_recording')}}";
    </script>
{% endblock %}
{% block body %}
    <div class='row mb-3'>
        <div class='col-12'>
            <h3 class='font-weight-bold'>
                {% if record_test %}
                    Hljóðprufa
                {% elif single %}
                    Stakur texti
                {% else %}
                    Söfnun: {{collection.name}}
                {% endif %}
            </h3>
            <div>
                <span id="errorMsg"></span>
            </div>
            <button id='send' type='button' class='btn btn-secondary' style='display:none;'>Senda</button>

        </div>
        {% if not single %}
            <div class='col-12 mt-3'>
                <p class='font-weight-bold'>(<span id='currentIndexSpan'></span>/<span id='totalIndexSpan'></span>)</p>
                <div class="progress">
                    <div class="progress-bar bg-success" id='tokenProgress' role="progressbar"></div>
                </div>
            </div>
        {% endif %}
    </div>
    <div class='row'>
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12 controls mb-3 d-flex justify-content-{% if single %}around{% else%}between{% endif %}'>
            {% if not single %}
                <button id='prev' class='btn btn-secondary rounded-circle directionButton' type='button'><i class='fa fa-arrow-left'></i></button>
            {% endif %}
            <div class='btn-group'>
                <button id='record' class='btn btn-success rounded-pill-left' type='button' data-state='initial'>
                    <i class='fa fa-microphone mr-2'></i>
                    Byrja
                </button>
                <button id='skipButton' class='btn btn-secondary rounded-pill-right' type='button'>
                    Sleppa
                    <i class='fa fa-times text-danger ml-2'></i>
                </button>
            </div>
            {% if not single %}
                <button id='next' class='btn btn-secondary rounded-circle directionButton' type='button'><i class='fa fa-arrow-right'></i></button>
            {% endif %}
        </div>
    </div>
    <div class='row'>
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12'>
            <div id='tokenCard' class="card">
                <div class="card-body">
                    <h3 class='card-text' id='tokenText'>{{token.text}}</h3>
                    <p class='mb-0'>{{token.id}}<span id="tokenID"></span></p>
                    <p class='card-text'><a id="tokenHref" href='#'><code id="tokenFileID"></code></a></p>
                    {% if not collection.has_video %}
                        <audio id="gum" playsinline muted></audio>
                        <audio id="recorded" playsinline></audio>
                    {% endif %}
                </div>
                <ul id='recordingInfoList' class="list-group list-group-flush">
                    <li id='analyzeLi' class='list-group-item' style='display: none;'>
                        <i id='analyzeIcn' class='fa mr-2'></i>
                        <span id="analyzeMsg"></span>
                    </li>
                    <li id="transcriptionLi" class="list-group-item" style="font-style: italic;">
                        <p id="transcriptionElement" class="mb-0"></p>
                        <small class="float-right" style="font-style: initial;">Rafrænt afrit</small>
                    </li>
                </ul>
            </div>
            <div id='micCard' class='card mt-2' style='display:none;'>
                <div class='card-body'>
                    <div id='micWaveform'></div>
                </div>
            </div>
            <div id='recordingCard' class='card mt-2'>
                <div class='card-body'>
                    <div id="waveform"></div>
                </div>
                <ul class='list-group list-group-flush'>
                    <li class='list-group-item'>
                        <code id='downloadRecordFName'></code>
                        <div class='btn-group float-right' role='group'>
                            <button id='play' type='button' class='btn btn-secondary btn-sm'>
                                <i id='playButtonIcon' class='fa fa-play'></i>
                            </button>
                            <button id='download' class="btn btn-secondary btn-sm"><i class='fa fa-download'></i></button>
                            <button id='delete' type='button' class='btn btn-secondary btn-sm text-danger'>
                                <i class='fa fa-trash'></i>
                            </button>
                        </div>
                    </li>
                </ul>
            </div>
            {% if collection.has_video %}
                <div class='card'>
                    <div class='card-body'>
                        <video id="gum" playsinline autoplay muted></video>
                        <video id="recorded" playsinline style='display: none;'></video>
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
{% endblock %}
{% block modals %}
    <div class="modal fade" id='errorModal' tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Villa!</h5>
                    <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class='font-weight-bold' id='errorTitleElement'></p>
                    <p><code class='font-weight-bold' id='errorMsgElement'></code></p>
                    <p><code id='errorStackElement'></code></p>
                    <p>Hafið samband við vefstjóra eða reynið aftur.</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Loka</button>
                    <a href="{{request.path}}" class='btn btn-primary'>
                        Reyna aftur
                        {{macros.btn_icon('redo', 'l')}}
                    </a>
                </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
{% block scripts %}
    {{super()}}
    <script src='{{url_for("static", filename="js/error.js")}}'></script>
    <script src='{{url_for("static", filename="js/analyzer.js")}}'></script>
    <script src='{{url_for("static", filename="js/base64ArrayBuffer.js")}}'></script>
    <script src='{{url_for("static", filename="js/tal.js")}}'></script>
    <script src='{{url_for("static", filename="js/surf.js")}}'></script>
    <script>
        'use strict';
        window.onbeforeunload = function() {
            return "Are you sure?";
        };

        let mediaRecorder;
        let audioCtx;
        let recordedBlobs;
        let sourceBuffer;
        let streamProcessor;
        let ws;
        let micSurfer;
        let wavesurfer;

        var tokenIndex = 0; // At what utterance are we now?
        var numTokens = tokens.length;

        //transcription
        const streamResultElem = document.querySelector("#transcriptionElement");
        const transcriptionListItem = document.querySelector('li#transcriptionLi');

        //token stuff
        const tokenText = document.querySelector("#tokenText");
        const tokenIDSpan = document.querySelector("#tokenID");
        const tokenHref= document.querySelector("#tokenHref");
        const tokenfileIDSpan = document.querySelector("#tokenFileID");
        const tokenProgress = document.querySelector('#tokenProgress');
        const currentIndexSpan = document.querySelector('#currentIndexSpan');
        const totalIndexSpan = document.querySelector('#totalIndexSpan');
        const tokenCard = document.querySelector('#tokenCard');

        //recording
        const recordingCard = document.querySelector('#recordingCard');
        const micCard = document.querySelector('#micCard');

        //analyze
        const analyzeListElement = document.querySelector('li#analyzeLi');
        const analyzeMsgElement = document.querySelector('span#analyzeMsg');
        const analyzeIcn = document.querySelector('#analyzeIcn');

        //media
        const gumVideo = document.querySelector('#gum');
        const recordedVideo = document.querySelector('#recorded');
        const submitForm = document.querySelector('form#submitForm');
        const downloadRecordFName = document.querySelector('code#downloadRecordFName');

        //buttons
        const recordButton = document.querySelector('button#record');
        const sendButton = document.querySelector('button#send');
        const nextButton = document.querySelector('button#next');
        const prevButton = document.querySelector('button#prev');
        const deleteButton = document.querySelector('button#delete');
        const playButton = document.querySelector('button#play');
        const downloadButton = document.querySelector('button#download');

        //register listeners
        nextButton.addEventListener('click', nextAction);
        prevButton.addEventListener('click', prevAction);
        recordButton.addEventListener('click', recordAction);
        playButton.addEventListener('click', playAction);
        deleteButton.addEventListener('click', deleteAction);
        skipButton.addEventListener('click', skipAction);
        downloadButton.addEventListener('click', downloadAction);
        $(window).keyup(function (e) {
            if (e.key === ' ' || e.key === 'Spacebar'  || e.keyCode === 38 || e.keyCode === 87) {
                // spacebar, arrow-up or "w"
                e.preventDefault()
                //recordAction();
            } else if(e.keyCode === 37 || e.keyCode === 65){ // arrow-left or "a"
                prevAction();
            } else if(e.keyCode === 39 || e.keyCode === 68){ // arrow-right or "d"
                nextAction();
            } else if(e.keyCode === 40 || e.keyCode === 83){ // arrow-down or "s"
                //playAction();
            }
        });

        const mediaSource = new MediaSource();
        mediaSource.addEventListener('sourceopen', handleSourceOpen, false);
        function handleSourceOpen(event) {
            console.log('MediaSource opened');
            sourceBuffer = mediaSource.addSourceBuffer('audio/webm');
            console.log('Source buffer: ', sourceBuffer);
        }

        function nextAction(){
            // Increment the sentence index and update the UI
            if(!areRecording() && !wavesurfer.isPlaying()){
                if(tokenIndex < numTokens - 1){tokenIndex += 1; updateUI();}
            }
        }

        function prevAction(){
            // Decrement the sentence index and update the UI
            if(!areRecording() && !wavesurfer.isPlaying()){
		        if(tokenIndex > 0){ tokenIndex -= 1; updateUI();}
            }
        }

        async function recordAction(){
            if (!areRecording()) {
                if('recording' in tokens[tokenIndex]){
                    deleteAction();
                }
                await startRecording();

            } else {
                await stopRecording();
            }
            updateUI();

            async function startRecording() {
                // initialize microphone and maybe camera
                if(!!wavesurfer){
                    wavesurfer.destroy();
                }
                try{
                    await init({{collection.json_media_constraints}});
                    async function init(constraints) {
                        const stream = await navigator.mediaDevices.getUserMedia(constraints);
                        handleSuccess(stream);

                        function handleSuccess(stream) {
                            recordButton.disabled = false;
                            console.log('getUserMedia() got stream:', stream);
                            window.stream = stream;
                            gumVideo.srcObject = stream;
                        }
                    }
                } catch(e){
                    console.log(e);
                    promptError('Villa í media_constraints', e.message, e.stack);
                    return;
                }

                recordedBlobs = [];
                let options = {mimeType: 'audio/webm'};

                try {
                    mediaRecorder = new MediaRecorder(window.stream, options);
                    audioCtx = new AudioContext(window.stream);
                    micSurfer = createMicSurfer(audioCtx, '#micWaveform');
                    ws = constructWS(audioCtx, streamResultElem);

                } catch (e) {
                    promptError("Villa kom upp við að búa til MediaRecorder", e.message, e.stack);
                    return;
                }

                console.log('Created MediaRecorder', mediaRecorder, 'with options', options);
                recordButton.textContent = 'Stop Recording';
                mediaRecorder.onstop = (event) => {
                    console.log('Recorder stopped: ', event);
                    console.log('Recorded Blobs: ', recordedBlobs);
                };
                mediaRecorder.ondataavailable = handleDataAvailable;
                function handleDataAvailable(event) {
                    console.log('handleDataAvailable', event);
                    if (event.data && event.data.size > 0) {
                        recordedBlobs.push(event.data);
                    }
                }
                mediaRecorder.start(10); // collect 10ms of data
                micSurfer.microphone.start();
                console.log('MediaRecorder started', mediaRecorder);
            }

            async function stopRecording() {

                mediaRecorder.stop();
                micSurfer.destroy();
                audioCtx.close();
                if (!!ws) {
                    if (ws.readyState === WebSocket.OPEN) {
                        ws.send(JSON.stringify({ audioContent: "" }));
                    }
                }

                await analyze();
                await addRecording();
                function addRecording(){
                    tokens[tokenIndex].recording = {
                        'blob': new Blob(recordedBlobs, {type: 'audio/webm'}),
                        'fname': `${new Date().toISOString()}.webm`,
                        'transcription': streamResultElem.innerHTML,
                    }
                }
            }
        }

        function deleteAction(){
            delete tokens[tokenIndex].recording;
            updateUI();
        }

        function skipAction(){
            delete tokens['tokenIndex'].recording;
            tokens['tokenIndex'].skipped = true;
            nextAction();
        }

        function playAction(){
            // Play the recording for the sentence at the current index.

            if(wavesurfer.isPlaying()){
                wavesurfer.pause();
            } else{
                wavesurfer.play();
            }
            /**
            gumVideo.style.display = 'none';
            const blob = new Blob(recordedBlobs, {type: 'audio/webm'});
            recordedVideo.src = null;
            recordedVideo.srcObject = null;
            recordedVideo.src = window.URL.createObjectURL(blob);
            recordedVideo.controls = true;
            recordedVideo.style.display = 'block';
            recordedVideo.play();
            **/
        }

        function downloadAction(){
            const blob = new Blob(recordedBlobs, {type: 'audio/webm'});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            const fname = `${new Date().toISOString()}.webm`;
            a.style.display = 'none';
            a.href = url;
            a.download = fname;
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        }


        // Initialize UI
        totalIndexSpan.innerHTML = numTokens;
        updateUI();

        function updateUI(){
            setTokenUI();
            setProgress(tokenIndex + 1);

            setTranscriptionUI();
            setAnalysisUI();
            setRecordingUI();
            setMicUI();
        }

        function setMicUI(){
            if(areRecording()){
                micCard.style.display = 'block';
            } else{
                micCard.style.display = 'none';
                if(micSurfer){
                    micSurfer.destroy();
                }
            }
        }

        function setProgress(num){
            var ratio = (num / numTokens) * 100;
            tokenProgress.style.width = `${ratio.toString()}%`;
            currentIndexSpan.innerHTML = num;
        }

        function setTokenUI(){
            tokenText.innerHTML = tokens[tokenIndex]['text'];
            tokenIDSpan.innerHTML = tokens[tokenIndex]['id'];
            tokenfileIDSpan.innerHTML = tokens[tokenIndex]['file_id'];
            tokenHref.href = tokens[tokenIndex]['url'];
        };

        async function setRecordingUI(){
            //if it has a recording
            if('recording' in tokens[tokenIndex]){
                wavesurfer = createWaveSurfer(playButtonIcon, '#waveform');
                await wavesurfer.loadBlob(tokens[tokenIndex].recording.blob);
                downloadRecordFName.innerHTML = tokens[tokenIndex].recording.fname;
                recordingCard.style.display = 'block';
            } else{
                recordingCard.style.display = 'none';
            }
        }

        function setTranscriptionUI(){
            if('recording' in tokens[tokenIndex]){
                if('transcription' in tokens[tokenIndex].recording){
                    transcriptionElement.innerHTML = tokens[tokenIndex].recording.transcription;
                } else{
                    transcriptionElement.innerHTML = 'Ekkert til afritunar';
                }
                transcriptionListItem.style.display = 'block';
            } else if(areRecording()){
                transcriptionListItem.style.display = 'block';
            } else{
                transcriptionListItem.style.display = 'none';
            }
        }

        function setAnalysisUI(){
            if('recording' in tokens[tokenIndex]){
                if('analysis' in tokens[tokenIndex]){
                    switch(tokens[tokenIndex].analysis){
                        case "ok":
                            setAnalyzeElement('Upptaka er góð', 'success', 'fa-thumbs-up');
                            break;
                        case "high":
                            setAnalyzeElement('Upptaka of há', 'danger', 'fa-thumbs-down');
                            break;
                        case "low":
                            setAnalyzeElement('Upptaka of lág', 'danger', 'fa-thumbs-down');
                            break;
                        case "error":
                            setAnalyzeElement('Villa kom upp', 'danger', 'fa-times');
                            break;
                    }
                } else{
                    setAnalyzeElement('Engin greining', 'warning', 'fa-question');
                }
            } else{
                analyzeListElement.style.display = 'none';
            }

            function setAnalyzeElement(text, type, icon){
                analyzeListElement.style.display = 'block';
                analyzeMsgElement.textContent = text;
                analyzeMsgElement.classList.remove('text-success', 'text-danger', 'text-warning');
                analyzeMsgElement.classList.add(`text-${type}`);
                analyzeIcn.classList.remove('fa-thumbs-up', 'fa-thumbs-down', 'fa-times',
                    'fa-question', 'text-success', 'text-danger', 'text-warning');
                analyzeIcn.classList.add(icon, `text-${type}`);
            }
        }

        function areRecording(){
            if(mediaRecorder){
                return mediaRecorder.state === "recording";
            }
            return false;
        }


        sendButton.addEventListener('click', () => {
            const blob = new Blob(recordedBlobs, {type: 'audio/webm'});
            var fd = new FormData();
            fd.append("the_file", blob, 'test.webm');
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '{{url_for("post_recording_beta", coll_id=collection.id)}}', true);
            xhr.send(fd);
        });

        async function analyze(){
            var msg = analyzeAudio(recordedBlobs, '{{url_for("analyze_audio")}}');
            tokens[tokenIndex].analysis = msg;
        }
    </script>
{% endblock %}